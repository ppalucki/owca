apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    role: prometheus-rules
  name: prometheus-rules-16-compatibility-rules-new-to-old
spec:
  groups:
    - name: SLOS
      rules:
        # -------------Memcached + Mutilate-----------------
        - record: apm__mutilate_alive
          expr: ceil(rate(apm__mutilate_stdout_lines[30s])>0)
        - record: apm__mutilate_qps
          expr: avg_over_time(apm__mutilate_scan_qps[60s]) and apm__mutilate_alive
        - record: apm__mutilate_latency
          expr: avg_over_time(apm__mutilate_scan_read_p99[60s]) and apm__mutilate_alive
        - record: apm__memcached_latency  # ms p99
          expr: ((label_replace(apm__mutilate_latency, "task_name", "$1/memcached-$2", "task_name", "(.*)/mutilate-(.*)")) * on(task_name) group_right() (task_last_seen/task_last_seen)) / 1e3
        - record: apm__memcached_qps
          expr: (label_replace(apm__mutilate_qps, "task_name", "$1/memcached-$2", "task_name", "(.*)/mutilate-(.*)")) * on(task_name) group_right() (task_last_seen/task_last_seen)
        # T & L
        - record: apm__throughput
          expr: apm__memcached_qps
        - record: apm__latency    # percentile99 [ms]
          expr: apm__memcached_latency

        # -------------Redis + Memtier-----------------
        # intermediary
        - record: apm__memtier_alive
          expr: ceil(rate(apm__memtier_stdout_lines[1m])>0)
        - record: apm__memtier_ops
          expr: avg_over_time(apm__memtier_scan_ops_sec[1m]) and apm__memtier_alive
        - record: apm__memtier_latency
          expr: avg_over_time(apm__memtier_scan_latency[1m]) and apm__memtier_alive
        # common apm metrics
        - record: apm__redis_latency  # msec latency
          expr: (label_replace(apm__memtier_latency, "task_name", "$1/redis-$2", "task_name", "(.*)/memtier-(.*)")) * on(task_name) group_right() task_up
        - record: apm__redis_qps
          expr: (label_replace(apm__memtier_ops, "task_name", "$1/redis-$2", "task_name", "(.*)/memtier-(.*)")) * on(task_name) group_right() task_up
        # T & L per app
        - record: apm__throughput
          expr: apm__redis_qps
        - record: apm__latency
          expr: apm__redis_latency

        # -------------Stress-stream-----------------
        - record: apm__stress_bogo_ops
          expr: rate(apm__stress_ng_bogo_ops_counter[90s]) and rate(apm__stress_ng_stdout_lines[15s]) > 0
        - record: apm__stress_bogo_ops_per_task
          expr: apm__stress_bogo_ops * on(task_name) group_right() task_up
          # T & L
        - record: apm__throughput      # bogo/ops (group_right to get labels from tasks)
          expr: apm__stress_bogo_ops_per_task
        - record: apm__latency          # average milliseconds to perform one bogus operation (ms)
          expr: 1e3 / apm__stress_bogo_ops_per_task

        # -------------Sysbench-memory-----------------
        - record: apm__sysbench_alive
          expr: ceil(rate(apm__sysbench_stdout_lines[15s])>0)
        - record: apm__sysbench_mbps    # MiB/sec
          expr: avg_over_time(apm__sysbench_qps[90s]) and apm__sysbench_alive
        - record: apm__sysbench_mbps_per_task
          expr: apm__sysbench_mbps  * on(task_name) group_right() task_up
          # T & L
        - record: apm__throughput       # MiB/sec (group_right to get labels from tasks)
          expr: apm__sysbench_mbps_per_task
        - record: apm__latency          # average mili seconds (ms) to transfer 1GB
          expr: 1e3 / (apm__sysbench_mbps_per_task/1e3)

        #--------------------------------------- GENERIC FOR ALL WORKLODAS
        - record: apm__sli          #  SLI based on latency
          expr: apm__latency

          #--------------------------------------- GENERIC FOR ALL WORKLODAS
        - record: apm__sli2          #  SLI based on throughput
          expr: apm__throughput
        #--------------------------------------- Targets for Latency [msecs]
        # Memcached latency goal
        - {record: apm__slo, labels: {app: memcached-big},    expr: "8.0" }
        - {record: apm__slo, labels: {app: memcached-medium}, expr: "3.0" }
        - {record: apm__slo, labels: {app: memcached-small},  expr: "1.0" }

        # Redis latency goal
        - {record: apm__slo, labels: {app: redis-big},        expr: "14"}
        - {record: apm__slo, labels: {app: redis-medium},     expr: "10"}
        - {record: apm__slo, labels: {app: redis-small},      expr: "5"}

        # Stress average duration for one bogus operation (maximum)
        - {record: apm__slo, labels: {app: stress-stream-big},    expr: "1500"}      #  4 threads
        - {record: apm__slo, labels: {app: stress-stream-medium}, expr: "15000"}      #  1 thread
        - {record: apm__slo, labels: {app: stress-stream-small},  expr: "7000"}       #  1 thread

        # Sysbench average durations [ms]  of copying 1GB (maximum)
        - {record: apm__slo, labels: {app: sysbench-memory-big}, expr: "200"}
        - {record: apm__slo, labels: {app: sysbench-memory-medium}, expr: "200"}
        - {record: apm__slo, labels: {app: sysbench-memory-small}, expr: "380"}

        #--------------------------------------- Targets for Throughtpu [msecs]
        # Memcached QPS goal
        - {record: apm__slo2, labels: {app: memcached-big},    expr: "20000" }
        - {record: apm__slo2, labels: {app: memcached-medium}, expr: "40000" }
        - {record: apm__slo2, labels: {app: memcached-small},  expr: "50000" }

        # Redis QPS goal
        - {record: apm__slo2, labels: {app: redis-big},        expr: "60000"}
        - {record: apm__slo2, labels: {app: redis-medium},     expr: "60000"}
        - {record: apm__slo2, labels: {app: redis-small},      expr: "70000"}

        # Number of bogs per seconds
        - {record: apm__slo2, labels: {app: stress-stream-big},    expr: "1000"}
        - {record: apm__slo2, labels: {app: stress-stream-medium}, expr: "15000"}
        - {record: apm__slo2, labels: {app: stress-stream-small},  expr: "6000"}

        # Sysbench number of copy operations
        - {record: apm__slo2, labels: {app: sysbench-memory-big}, expr: "150"}
        - {record: apm__slo2, labels: {app: sysbench-memory-medium}, expr: "150"}
        - {record: apm__slo2, labels: {app: sysbench-memory-small}, expr: "250"}

        ##--------------------------------------- normalized
        #  # Memcached QPS goal
        #  - {record: apm__slo, labels: {app: memcached-big}, expr: 500}
        #  - {record: apm__slo, labels: {app: memcached-medium}, expr: 500}
        #  - {record: apm__slo, labels: {app: memcached-small}, expr: 500}
        #  # Redis QPS goal
        #  - {record: apm__slo, labels: {app: redis-big}, expr: 100000}
        #  - {record: apm__slo, labels: {app: redis-medium}, expr: 100000}
        #  - {record: apm__slo, labels: {app: redis-small}, expr: 100000}
        #  # Stress Bogo / sec goal
        #  - {record: apm__slo, labels: {app: stress-stream-big}, expr: 50}
        #  - {record: apm__slo, labels: {app: stress-stream-medium}, expr: 50}
        #  - {record: apm__slo, labels: {app: stress-stream-small}, expr: 50}
        #  # Sysbench MB/s target
        #  - {record: apm__slo, labels: {app: sysbench-memory-big}, expr: 50000}
        #  - {record: apm__slo, labels: {app: sysbench-memory-medium}, expr: 50000}
        #  - {record: apm__slo, labels: {app: sysbench-memory-small}, expr: 50000}

        # NORMALIZED ACCORDING THE GOALS 1
        - record: apm__sli_normalized
          expr: apm__sli / on (app) group_left apm__slo

        # NORMALIZED ACCORDING THE GOALS 2
        - record: apm__sli2_normalized
          expr: apm__sli2 / on (app) group_left apm__slo2

