# Outputs:
# - app_cpu
# - app_mem
# - app_mbw_flat
# - app_wss (based on two version app_wss_v1 and app_wss_v2)
# with per "application" granulation ("app" label)
#
# Inputes (wca with enabled):
# - events: task_offcore_requests_demand_data_rd, task_offcore_requests_demand_rfo
# - RDT/MBM: task_mem_bandwidth_bytes
# - ipmctl: platform_nvdimm_read_bandwidth_bytes_per_second, platform_nvdimm_write_bandwidth_bytes_per_second

# Parameters (assuming wca interval is set to 1m):
# - task_memory_rw_ratio = 3m (rate for events)
# - ignore initialization = 10m (expect at least 10 x 1m samples)
# - wss/mbw over time = 1h

apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule

metadata:
  name: wca-app

spec:
  groups:
  - name: wca-app
    rules:

    # ------------------ Helper metrics - produces task_mbw_flat
    # add app_namespace based on task_name
    - record: task_mem_bandwidth_bytes_relabeled
      expr: 'label_replace(task_mem_bandwidth_bytes, "app_namespace", "$1", "task_name", "(.*)/.*")'
    - record: task_offcore_requests_demand_rfo_relabeled
      expr: 'label_replace(task_offcore_requests_demand_rfo, "app_namespace", "$1", "task_name", "(.*)/.*")'
    - record: task_offcore_requests_demand_data_rd_relabeled
      expr: 'label_replace(task_offcore_requests_demand_data_rd, "app_namespace", "$1", "task_name", "(.*)/.*")'

    # Note: heuristic for approximation of R/W ratio for a task; 3m set to be sure to have in each range at least 2 points;
    - record: task_memory_rw_ratio
      expr: '(rate(task_offcore_requests_demand_data_rd_relabeled[3m]) + rate(task_offcore_requests_demand_rfo_relabeled[3m])) /
             (rate(task_offcore_requests_demand_data_rd_relabeled[3m]) + 2*rate(task_offcore_requests_demand_rfo_relabeled[3m]))'
      labels:
        source: wca
    - record: task_mbw  # GB/s
      expr: 'rate(task_mem_bandwidth_bytes_relabeled[3m]) / 1e9'
      labels:
        source: wca
    # task_memory_rw_ratio with added 2lm label
    - record: task_memory_rw_ratio_ 
      expr: 'task_memory_rw_ratio'
      labels:
        memory: 2lm
    # task_mbw with added 2lm label
    - record: task_mbw_ 
      expr: 'task_mbw'
      labels:
        memory: 2lm
    - record: task_mbw_read
      expr: 'task_mbw_ * 0.5'
      # expr: 'task_mbw_ * task_memory_rw_ratio_'


    # Additional metric: read/write assymetry ratio (on 1lm equal to 1, on 2lm ~= 4)
    - record: node_mbw_write_weight
      expr: '(avg(ceil(sum(platform_nvdimm_read_bandwidth_bytes_per_second)  by (node)) and on(node) platform_mem_mode_size_bytes!=0) by (node)) /
             (avg(ceil(sum(platform_nvdimm_write_bandwidth_bytes_per_second) by (node)) and on(node) platform_mem_mode_size_bytes!=0) by (node))'
      labels:
        memory: 2lm
        source: wca
    - record: task_mbw_write
      expr: '(1 - task_memory_rw_ratio_) * task_mbw_ * on(memory,node) group_left node_mbw_write_weight{source="wca"}'
    - record: task_mbw_flat
      expr: 'task_mbw_read + task_mbw_write'

    # ------------------- Ignore first 30m=3m*10=30m of run of each task for mbw_flat and task_wss_ignore_initialization
    - record: task_mbw_flat_ignore_initialization
      expr: 'task_mbw_flat and count_over_time(task_mbw_flat[30m:1m]) >= 10'
      labels:
        source: wca

    # add app_namespace based on task_name
    - record: task_working_set_size_bytes_relabeled
      expr: 'label_replace(task_working_set_size_bytes, "app_namespace", "$1", "task_name", "(.*)/.*")'

    - record: task_wss_ignore_initialization
      expr: 'task_working_set_size_bytes_relabeled and count_over_time(task_working_set_size_bytes_relabeled[30m:1m]) >= 10'
      labels:
        source: wca

    # --------- v0 version of WSS uses python based from wca/wss.py stability rules ----------------
    - record: app_wss_v1
      expr: 'quantile(0.95, quantile_over_time(0.95, task_wss_ignore_initialization[1h])) by (app, source, app_namespace) / 1e9'

    # add app_namespace based on task_name
    - record: task_requested_cpus_relabeled
      expr: 'label_replace(task_requested_cpus, "app_namespace", "$1", "task_name", "(.*)/.*")'

    # add app_namespace based on task_name
    - record: task_requested_mem_bytes_relabeled
      expr: 'label_replace(task_requested_mem_bytes, "app_namespace", "$1", "task_name", "(.*)/.*")'



    # ------------------- FINAL app_RESOURCE metrics
    # --- cpu
    - record: app_cpu
      expr: 'max(max_over_time(task_requested_cpus_relabeled[1h])) by (app, app_namespace)'
      labels:
        source: wca
    # --- mem
    - record: app_mem
      expr: 'max(max_over_time(task_requested_mem_bytes_relabeled[1h])) by (app, app_namespace) / 1e9'
      labels:
        source: wca
    # --- mbw_flat
    - record: app_mbw_flat
      expr: 'quantile(0.95, quantile_over_time(0.95, task_mbw_flat_ignore_initialization[1h])) by (app, source, app_namespace)'
    # --- wss
    - record: app_wss
      expr: 'app_wss_v2'

