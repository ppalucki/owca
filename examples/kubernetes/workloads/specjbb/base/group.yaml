apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: specjbb-group
spec:
  serviceName: specjbb-group
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      app: specjbb-group
  template:
    metadata:
      labels:
        app: specjbb-group
    spec:
      nodeSelector:
        owner: ppalucki
        # goal: service
      terminationGracePeriodSeconds: 0
      containers:
        - name: backend
          image: specjbb
          #ALL ENV FROM FILE
          envFrom:
            - configMapRef:
                name: specjbb
            - configMapRef:
                name: specjbb-backend
          env:
            # Downward API
            - name: podname
              valueFrom:
                fieldRef:
                   fieldPath: metadata.name
            - name: cores
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: requests.cpu
            - name: MY_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: limits.cpu
            - name: MY_MEM_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: requests.memory
            - name: MY_MEM_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: limits.memory

          # xmn_to_xms # read xmn xms params for JVM; here we assign 0.94 as experimentally checked parameter;
          command:
            - sh
            - -c
            - >
              # Discovery

              ## Delete front name

              identifier=${podname#specjbb-group-};
              echo identifier: $identifier;

              ## Delete from back to last '-'

              name_suffix=${identifier%-*};
              echo service: name_suffix;

              ## Delete to last '-'

              group_count=$(specjbb.group.count);

              number=${podname##*-};
              echo number: $number group_count: $group_count;

              controller_identifier=$(($number/$group_count));
              echo controller_identifier: $controller_identifier;
              target=specjbb-controller-${name_suffix}-${controller_identifier}.specjbb-controller-${name_suffix};
              echo targeting: $target;

              group_identifier=$(($number%$group_count))
              group=GRP$group_identifier;
              echo group: $group group_identifier: $group_identifier;

              # RUN COMMAND

              set -x;

              java
              -Dcom.sun.management.jmxremote.port=8686
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.ssl=false
              -Xmx$(($MY_MEM_REQUEST*80/100))
              -Xms$(($MY_MEM_REQUEST*80/100))
              -Xmn$(($MY_MEM_REQUEST*80/100*94/100))
              -XX:MaxRAM=$MY_MEM_REQUEST
              -XX:ParallelGCThreads=${cores}
              $java
              $java2
              -Dspecjbb.forkjoin.workers=$(($cores*2))
              -Dspecjbb.mapreducer.pool.size=$(($group_count*2))
              -Dspecjbb.controller.host=$target
              $specjbb_extra
              -jar /home/specjbb/specjbb2015.jar
              -m BACKEND
              -G ${group}
              -J JVM_A_${name_suffix}_${number}

        - name: injector
          image: specjbb
          #ALL ENV FROM FILE
          envFrom:
            - configMapRef:
                name: specjbb
            - configMapRef:
                name: specjbb-injector
          env:
            # Downward API
            - name: podname
              valueFrom:
                fieldRef:
                   fieldPath: metadata.name
            - name: cores
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: requests.cpu
            - name: MY_CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: limits.cpu
            - name: MY_MEM_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: requests.memory
            - name: MY_MEM_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: backend
                  resource: limits.memory
          command:
            - sh
            - -c
            - >
              # Discovery

              group_count=$(specjbb.group.count);

              ## Delete front name

              identifier=${podname#specjbb-group-};
              echo identifier: $identifier;

              ## Delete from back to last '-'

              name_suffix=${identifier%-*};
              echo service: name_suffix;

              ## Delete to last '-'

              number=${podname##*-};
              echo number: $number;

              controller_identifier=$(($number/$group_count));
              target=specjbb-controller-${name_suffix}-${controller_identifier}.specjbb-controller-${name_suffix};
              echo targeting: $target;

              group_identifier=$(($number%$group_count))
              group=GRP$group_identifier;
              echo group: $group group_identifier: $group_identifier;

              # RUN COMMAND

              set -x;

              java
              -Xmx$(($MY_MEM_REQUEST*80/100))
              -Xms$(($MY_MEM_REQUEST*80/100))
              -Xmn$(($MY_MEM_REQUEST*80/100*94/100))
              $java
              -Dspecjbb.controller.host=$target
              $specjbb_extra
              -jar /home/specjbb/specjbb2015.jar
              -m TXINJECTOR
              -G ${group}
              -J JVM_B_${name_suffix}_${number}

  # required for workaround bug with kustomize https://github.com/kubernetes-sigs/kustomize/issues/504
  # when using commonLabels
  volumeClaimTemplates: []
